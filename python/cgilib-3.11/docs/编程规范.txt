编程规范

一.注释
原则上注释要求使用中文;
文件开始注释内容包括:公司名称、版权、作者名称、时间、模块用途、背景介绍等,复
杂的算法需要加上流程说明;
函数注释包括:输入、输出、函数描述、流程处理、全局变量、调用样例等,复杂的函数
需要加上变量用途说明;
程序中注释包括:修改时间和作者、方便理解的注释等;


文件开头的注释模板
/******************************************************************
Copyright (c) 2001-2004
文 件 名:
作    者: 刘宇	liuyu@jltx.com
版    本: v2.01
完成日期:
文件说明:	// 用于详细说明此程序文件完成的主要功能，与其他模块
                // 或函数的接口，输出值、取值范围、含义及参数间的控
                // 制、顺序、独立或依赖等关系
其    它:	// 其它内容的说明
函数列表:	// 主要函数列表，每条记录应包括函数名及功能简要说明
	1.
历史记录:	// 修改历史记录列表，每条修改记录应包括修改日期、修
		// 改者及修改内容简述
	1.
	修改人:
	版　本:
	日　期:
	描　述:

******************************************************************/

函数开头的注释模板
/******************************************************************
函 数 名:
功能描述:	// 函数功能、性能等的描述
输　  入:	// 输入参数说明，包括每个参数的作用、取值说明及参数
		// 间关系。 
	a,b,c
	a---
	b---
	c---
输　  出: 	// 对输出参数的说明。
	x---
	x 为 1, 表示...
	x 为 0, 表示...
返 回 值:	// 函数返回值的说明
全局变量:
调用模块:	// 被本函数调用的函数清单
		// 调用本函数的函数清单
被访问表: 	// 被访问的表（此项仅对于牵扯到数据库操作的程序）
被修改表:	// 被修改的表（此项仅对于牵扯到数据库操作的程序）
作　  者:
版    本:
完成日期:
历史记录:	// 修改历史记录列表，每条修改记录应包括修改日期、修
		// 改者及修改内容简述
	1.
	修改人:
	版　本:
	日　期:
	描　述:
******************************************************************/

程序中的注释模板
// 注释内容


二.UNIX命名规范

命名规范必须与所使用的系统风格保持一致，并在同一项目中统一，比如采用UNIX的全
小写加下划线的风格或大小写混排的方式，不要使用大小写与下划线混排的方式，用作
特殊标识如标识成员变量或全局变量的m_和g_，其后加上大小写混排的方式是允许的。

用正确的反义词组命名具有互斥意义的变量或相反动作的函数等。
说明：下面是一些在软件中常用的反义词组。
add / remove       begin / end        create / destroy 
insert / delete    first / last       get / release
increment / decrement                 put / get
add / delete       lock / unlock      open / close
min / max          old / new          start / stop
next / previous    source / target    show / hide
send / receive     source / destination
cut / paste        up / down

三.断言检查

用断言对程序开发环境（OS/Compiler/Hardware）的假设进行检查。
#include <assert.h>
void assert(scalar expression);

四、调试开关

_CGI_LIB_DEBUG_




